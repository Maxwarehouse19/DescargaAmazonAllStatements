// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using NUnit.Framework;
using System.Configuration;
using System.Globalization;
using System.Data.SqlClient;
using System.IO;
using DescargaAmazonAllStatements;
using System.Data;
using ClosedXML.Excel;

[TestFixture]
public class DescargaamazonTest 
{
  private IWebDriver driver;
  public IDictionary<string, object> vars {get; private set;}
  private IJavaScriptExecutor js;
  [SetUp]
  public void SetUp() {
        ChromeOptions options = new ChromeOptions();
        string Cookies = @"user-data-dir="+ ConfigurationManager.AppSettings["PathCookies"];
        options.AddArguments(Cookies);//specify location for profile creation/ access
                                      //ChromeDriver driver = new ChromeDriver(options);

        String downloadFilepath = ConfigurationManager.AppSettings["RutaDescarga"];
        options.AddUserProfilePreference("download.prompt_for_download", false);
        options.AddUserProfilePreference("download.directory_upgrade", true);
        options.AddUserProfilePreference("download.default_directory", downloadFilepath);

        driver = new ChromeDriver(options);
        js = (IJavaScriptExecutor)driver;
        vars = new Dictionary<string, object>();
  }
  [TearDown]
  protected void TearDown() {
    driver.Quit();
  }
    [Test]
    public void descargaamazon()
    {
        string directoryPath = ConfigurationManager.AppSettings["CarpetaArchivosSecundarios"];
        string newDirectoryPath = directoryPath + @"\DatosAnteriores\";
        if (Directory.Exists(directoryPath))
        {
            foreach (var file in new DirectoryInfo(directoryPath).GetFiles())
            {
                file.MoveTo($@"{newDirectoryPath}\{file.Name}");
            }
        }

        // Test name: descarga amazon
        // Step # | name | target | value | comment
        // 1 | open | / |  | 
        driver.Navigate().GoToUrl("https://sellercentral.amazon.com/ap/signin?openid.pape.max_auth_age=0&openid.return_to=https%3A%2F%2Fsellercentral.amazon.com%2Fhome&openid.identity=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0%2Fidentifier_select&openid.assoc_handle=sc_na_amazon_v2&openid.mode=checkid_setup&language=en_US&openid.claimed_id=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0%2Fidentifier_select&pageId=sc_na_amazon_v2&openid.ns=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0&ssoResponse=eyJ6aXAiOiJERUYiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiQTI1NktXIn0.XRKdDM526dLtCCiKI1NcIGWv3GRMIFbelVwc4sJf1LcAU4mJJBbnwg.0a5f5wMNJP0azSbs.rETtwGy7QzHkqStVoc1N6-I0ZE2BXMaVebv_rocIdfurfx0ok8t_0qbO91RAetQvbSdhwmhmDRPXB-H5rOB7-X-MfIqHLNupdazA0NCMjE6LSTyBRVEooZQajbA1425hDI0VUiwvSVNTuRIZj-7iE6uiUPTeC1NIjZZ8f2f4tqpsILasDb18MzGsalZ3UZoTY_PYYU02omV4UeoVJJcrX0VKBa7O1j8fDG_9MD8h8bYI5KK2gcPpTxw7IKSOwU9sOObp1w.uSua1p-NoxTMkAPOYgy2Hg");
        // 2 | setWindowSize | 1536x827 |  | 
        driver.Manage().Window.Size = new System.Drawing.Size(1536, 827);

        System.Threading.Thread.Sleep(2000);

        try
        {
            // 3 | click | css=#sign-in-button > .secondary |  | 
            //driver.FindElement(By.CssSelector("#sign-in-button > .secondary")).Click();
            // 4 | type | id=ap_email | vpverbena@maxwarehouse.com | 
            string UsuarioAmazon = ConfigurationManager.AppSettings["UsrAmazon"];
            driver.FindElement(By.Id("ap_email")).SendKeys(UsuarioAmazon);
        }
        catch (SystemException e)
        {
            Console.WriteLine("ERROR");
            Console.WriteLine(e.Message);
        }
        catch (NoSuchElementException e)
        {
            Console.WriteLine("ERROR");
            Console.WriteLine(e.Message);
        }
        catch (StaleElementReferenceException e)
        {
            Console.WriteLine("ERROR");
            Console.WriteLine(e.Message);
        }
        catch (WebDriverException e)
        {
            Console.WriteLine("ERROR");
            Console.WriteLine(e.Message);
        }

        System.Threading.Thread.Sleep(2000);

        // 5 | click | id=ap_password |  | 
        driver.FindElement(By.Id("ap_password")).Click();
        // 6 | click | id=ap_password |  | 
        driver.FindElement(By.Id("ap_password")).Click();
        // 7 | type | id=ap_password | maxshippinganalyst | 
        string PasswordAmazon = ConfigurationManager.AppSettings["PassAmazon"];
        driver.FindElement(By.Id("ap_password")).SendKeys(PasswordAmazon);
        // 8 | click | id=signInSubmit |  | 
        driver.FindElement(By.Id("signInSubmit")).Click();

        System.Threading.Thread.Sleep(2000);

        // 9 | click | linkText=Reports |  | 
        //driver.FindElement(By.LinkText("Reports")).Click();
        driver.Navigate().GoToUrl("https://sellercentral.amazon.com/payments/reports/custom/request?tbla_daterangereportstable=sort:%7B%22sortOrder%22%3A%22DESCENDING%22%7D;search:undefined;pagination:1;");
        // 10 | click | linkText=Business Reports |  | 
        //driver.FindElement(By.LinkText("Business Reports")).Click();
        //// 11 | click | linkText=Payments |  | 
        //driver.FindElement(By.LinkText("Payments")).Click();

        // 12 | click | linkText=Date Range Reports |  | 
        driver.FindElement(By.LinkText("All Statements")).Click();

        driver.FindElement(By.XPath("/html/body/div[2]/div[2]/table/tbody/tr[5]/td/table[2]/tbody/tr[3]/td[8]/div[3]/a/span/span")).Click();

        System.Threading.Thread.Sleep(30000);

        driver.Navigate().GoToUrl("https://sellercentral.amazon.com/returns/report/ref=xx_scnvrr_dnav_xx");

        System.Threading.Thread.Sleep(30000);

        driver.FindElement(By.Id("a-autoid-0-announce")).Click();
        driver.FindElement(By.Id("reportTypesDropDown_1")).Click();
        driver.FindElement(By.Id("a-autoid-1-announce")).Click();
        driver.FindElement(By.Id("adhocReportDateRangeDropDown_1")).Click();
        driver.FindElement(By.Id("buttonRequestAdhocReport-announce")).Click();

        System.Threading.Thread.Sleep(30000);

        driver.FindElement(By.Id("buttonReturnsReportRefresh-announce")).Click();

        System.Threading.Thread.Sleep(30000);

        driver.FindElement(By.Id("buttonReturnsReportRefresh-announce")).Click();

        System.Threading.Thread.Sleep(30000);

        driver.FindElement(By.XPath("/html/body/div[1]/div[2]/div[1]/div/div/div[1]/div/div[4]/div/div[2]/div/div[2]/div/div[4]/div/div[2]/span/span/a")).Click();

        System.Threading.Thread.Sleep(30000);

        SqlConnection ConexionGenerico = new SqlConnection();
        ConexionGenerico.ConnectionString = ConfigurationManager.AppSettings["ConectionString"];
        string sqlGenerico = "EliminaRegistrosRETURNSAMAZON";
        SqlCommand commandGenerico = new SqlCommand(sqlGenerico, ConexionGenerico);
        commandGenerico.CommandType = CommandType.StoredProcedure;
        commandGenerico.CommandTimeout = 7200; //in seconds
        ConexionGenerico.Open();
        commandGenerico.ExecuteNonQuery();
        ConexionGenerico.Close();

        SqlConnection Conexion = new SqlConnection();
        Conexion.ConnectionString = ConfigurationManager.AppSettings["ConectionString"];
        CargaReturns(Conexion);

    }

    // returns para reporte 
    // --------------------
    private void CargaReturns(SqlConnection Conexion)
    {
 
        // abre todos los archivo secundarios para cargarlos en una lista y evaluar cuales se encuentran en los maestros
        // para unificarlos y poder generar un archivo de salida
        // -------------------------------------------------------------------------------------------------------------
        string ArchivosSecundarios = ConfigurationManager.AppSettings["CarpetaArchivosSecundarios"];
        DirectoryInfo Directorios = new DirectoryInfo(ArchivosSecundarios);

        foreach (var Archivos in Directorios.GetFiles())
        {


            // obtiene datos del excel base
            // ----------------------------
            string file = Archivos.FullName;
 
            string filemaster = "report-";

            if (filemaster != "")
            {
                if (!Archivos.Name.ToUpper().Contains(filemaster.ToUpper()))
                    continue;
            }


            // Read the file and display it line by line.  
            System.IO.StreamReader ReturnFile = new System.IO.StreamReader(file);
            string[] PalabraReturn = new string[32];
            int contPala = 0;
            string line;

            while ((line = ReturnFile.ReadLine()) != null)
            {
                string[] sa = line.Split('\t');

                if (sa.Length > 32)
                {
                    //cantidad = sa.Length - 42;
                    continue;
                }

                contPala = 0;
                foreach (string s in sa)
                {
                    PalabraReturn[contPala] = s;
                    contPala = contPala + 1;
                }

                if (PalabraReturn[0].Contains("Order ID"))
                    continue;

                RETURNAMAZON clsPedido = new RETURNAMAZON();

               
                if (PalabraReturn[1].Contains("-"))
                    clsPedido.Orderdate = Convert.ToDateTime(PalabraReturn[1]);
                else
                    clsPedido.Orderdate = new DateTime(1000, 1, 1);

                if (PalabraReturn[2].Contains("-"))
                    clsPedido.Returnrequestdate = Convert.ToDateTime(PalabraReturn[2]);
                else
                    clsPedido.Returnrequestdate = new DateTime(1000, 1, 1);

                clsPedido.OrderID = PalabraReturn[0];
                clsPedido.Returnrequeststatus = PalabraReturn[3];
                clsPedido.AmazonRMAID = PalabraReturn[4];
                clsPedido.SellerRMAID = PalabraReturn[5];
                clsPedido.Labeltype = PalabraReturn[6];

                if (PalabraReturn[7].Contains(" "))
                    clsPedido.Labelcost = 0;
                else
                    clsPedido.Labelcost = (float)System.Convert.ToDecimal(PalabraReturn[7]); 


                clsPedido.Currencycode = PalabraReturn[8];
                clsPedido.Returncarrier = PalabraReturn[9];
                clsPedido.TrackingID = PalabraReturn[10];
                clsPedido.Labeltobepaidby = PalabraReturn[11];
                clsPedido.Atozclaim = PalabraReturn[12];
                clsPedido.Isprime = PalabraReturn[13];
                clsPedido.ASIN = PalabraReturn[14];
                clsPedido.MerchantSKU = PalabraReturn[15];
                clsPedido.ItemName = PalabraReturn[16];

                if (PalabraReturn[17].Contains(" "))
                    clsPedido.Returnquantity = 0;
                else
                    clsPedido.Returnquantity = (float)System.Convert.ToDecimal(PalabraReturn[17]);

                clsPedido.Returnreason = PalabraReturn[18];
                clsPedido.Inpolicy = PalabraReturn[19];
                clsPedido.Returntype = PalabraReturn[20];
                clsPedido.Resolution = PalabraReturn[21];
                clsPedido.Invoicenumber = PalabraReturn[22];
                clsPedido.Returndeliverydate = PalabraReturn[23];

                if (PalabraReturn[24].Contains(" "))
                    clsPedido.OrderAmount = 0;
                else
                    clsPedido.OrderAmount = (float)System.Convert.ToDecimal(PalabraReturn[24]);


                if (PalabraReturn[25].Contains(" "))
                    clsPedido.Orderquantity = 0;
                else
                    clsPedido.Orderquantity = (float)System.Convert.ToDecimal(PalabraReturn[25]);

                clsPedido.SafeTActionreason = PalabraReturn[26];
                clsPedido.SafeTclaimid = PalabraReturn[27];
                clsPedido.SafeTclaimstate = PalabraReturn[28];
                clsPedido.SafeTclaimcreationtime = PalabraReturn[29];
                clsPedido.SafeTclaimreimbursementamount = PalabraReturn[30];
                clsPedido.RefundedAmount = PalabraReturn[31];


                string sqlAInsertaRegistroDW = "InsertaRegistroRETURNSAMAZON";
                SqlCommand cmdReturn = new SqlCommand(sqlAInsertaRegistroDW, Conexion);
                DateTime dte = new DateTime(1000, 1, 1);
                cmdReturn.CommandType = CommandType.StoredProcedure;

                if (clsPedido.Orderdate != dte)
                    cmdReturn.Parameters.Add("@Orderdate", SqlDbType.DateTime).Value = clsPedido.Orderdate;
                else
                    cmdReturn.Parameters.Add("@Orderdate", SqlDbType.DateTime).Value = DBNull.Value;

                if (clsPedido.Returnrequestdate != dte)
                    cmdReturn.Parameters.Add("@Returnrequestdate", SqlDbType.DateTime).Value = clsPedido.Returnrequestdate;
                else
                    cmdReturn.Parameters.Add("@Returnrequestdate", SqlDbType.DateTime).Value = DBNull.Value;

                cmdReturn.Parameters.Add("@OrderID", SqlDbType.VarChar).Value = clsPedido.OrderID;
                cmdReturn.Parameters.Add("@Returnrequeststatus", SqlDbType.VarChar).Value = clsPedido.Returnrequeststatus;
                cmdReturn.Parameters.Add("@AmazonRMAID", SqlDbType.VarChar).Value = clsPedido.AmazonRMAID;
                cmdReturn.Parameters.Add("@SellerRMAID", SqlDbType.VarChar).Value = clsPedido.SellerRMAID;
                cmdReturn.Parameters.Add("@Labeltype", SqlDbType.VarChar).Value = clsPedido.Labeltype;
                cmdReturn.Parameters.Add("@Labelcost", SqlDbType.Float).Value = clsPedido.Labelcost;
                cmdReturn.Parameters.Add("@Currencycode", SqlDbType.VarChar).Value = clsPedido.Currencycode;
                cmdReturn.Parameters.Add("@Returncarrier", SqlDbType.VarChar).Value = clsPedido.Returncarrier;
                cmdReturn.Parameters.Add("@TrackingID", SqlDbType.VarChar).Value = clsPedido.TrackingID;
                cmdReturn.Parameters.Add("@Labeltobepaidby", SqlDbType.VarChar).Value = clsPedido.Labeltobepaidby;
                cmdReturn.Parameters.Add("@Atozclaim", SqlDbType.VarChar).Value = clsPedido.Atozclaim;
                cmdReturn.Parameters.Add("@Isprime", SqlDbType.VarChar).Value = clsPedido.Isprime;
                cmdReturn.Parameters.Add("@ASIN", SqlDbType.VarChar).Value = clsPedido.ASIN;
                cmdReturn.Parameters.Add("@MerchantSKU", SqlDbType.VarChar).Value = clsPedido.MerchantSKU;
                cmdReturn.Parameters.Add("@ItemName", SqlDbType.VarChar).Value = clsPedido.ItemName;
                cmdReturn.Parameters.Add("@Returnquantity", SqlDbType.Float).Value = clsPedido.Returnquantity;
                cmdReturn.Parameters.Add("@Returnreason", SqlDbType.VarChar).Value = clsPedido.Returnreason;
                cmdReturn.Parameters.Add("@Inpolicy", SqlDbType.VarChar).Value = clsPedido.Inpolicy;
                cmdReturn.Parameters.Add("@Returntype", SqlDbType.VarChar).Value = clsPedido.Returntype;
                cmdReturn.Parameters.Add("@Resolution", SqlDbType.VarChar).Value = clsPedido.Resolution;
                cmdReturn.Parameters.Add("@Invoicenumber", SqlDbType.VarChar).Value = clsPedido.Invoicenumber;
                cmdReturn.Parameters.Add("@Returndeliverydate", SqlDbType.VarChar).Value = clsPedido.Returndeliverydate;
                cmdReturn.Parameters.Add("@OrderAmount", SqlDbType.Float).Value = clsPedido.OrderAmount;
                cmdReturn.Parameters.Add("@Orderquantity", SqlDbType.Float).Value = clsPedido.Orderquantity;
                cmdReturn.Parameters.Add("@SafeTActionreason", SqlDbType.VarChar).Value = clsPedido.SafeTActionreason;
                cmdReturn.Parameters.Add("@SafeTclaimid", SqlDbType.VarChar).Value = clsPedido.SafeTclaimid;
                cmdReturn.Parameters.Add("@SafeTclaimstate", SqlDbType.VarChar).Value = clsPedido.SafeTclaimstate;
                cmdReturn.Parameters.Add("@SafeTclaimcreationtime", SqlDbType.VarChar).Value = clsPedido.SafeTclaimcreationtime;
                cmdReturn.Parameters.Add("@SafeTclaimreimbursementamount", SqlDbType.VarChar).Value = clsPedido.SafeTclaimreimbursementamount;
                cmdReturn.Parameters.Add("@RefundedAmount", SqlDbType.VarChar).Value = clsPedido.RefundedAmount;

                try
                {
                    Conexion.Open();
                    cmdReturn.ExecuteNonQuery();
                    Conexion.Close();
                }
                catch (SystemException e)
                {
                    Console.WriteLine("ERROR");
                    Console.WriteLine(e.Message);
                }
            }

            // genera reporte de returns
            // -------------------------
            string pathOutPut = ConfigurationManager.AppSettings["RutaArchivosOutputs"];

            using (var workbook = new XLWorkbook())
            {
                // ejecuto sp que devuelve el crokis
                // ----------------------------------
                SqlConnection Conexion1 = new SqlConnection();

                Conexion1.ConnectionString = ConfigurationManager.AppSettings["ConectionString"];

                Conexion1.Open();
                SqlCommand cmd = new SqlCommand("ReporteSkuReturns", Conexion1);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 7200; //in seconds
                SqlDataReader reader = cmd.ExecuteReader();

                //Create a new DataTable.
                System.Data.DataTable dt = new System.Data.DataTable("Resultado");

                //Load DataReader into the DataTable.
                dt.Load(reader);

                var worksheet = workbook.Worksheets.Add("Output");

                List<string[]> titles = new List<string[]> { new string[] { "MerchantSKU", "Conteo", "Labelcost", "Returnreason", "OrderAmount" } };

                worksheet.Cell(1, 1).InsertData(titles); //insert titles to one row

                worksheet.Cell(2, 1).InsertData(dt);// inserta Contenido
                
                pathOutPut = pathOutPut + @"\ReturnsReportSeller" + DateTime.Now.ToString("yyyyMMddTHHmmss") + ".xlsx";
                workbook.SaveAs(pathOutPut);

            }

            // genera reporte de returns
            // -------------------------
            string pathOutPut1 = ConfigurationManager.AppSettings["RutaArchivosOutputs"];

            using (var workbook = new XLWorkbook())
            {
                // ejecuto sp que devuelve el crokis
                // ----------------------------------
                SqlConnection Conexion1 = new SqlConnection();

                Conexion1.ConnectionString = ConfigurationManager.AppSettings["ConectionString"];

                Conexion1.Open();
                SqlCommand cmd = new SqlCommand("ReporteSkuReturnsCustomer", Conexion1);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 7200; //in seconds
                SqlDataReader reader = cmd.ExecuteReader();

                //Create a new DataTable.
                System.Data.DataTable dt = new System.Data.DataTable("Resultado");

                //Load DataReader into the DataTable.
                dt.Load(reader);

                var worksheet = workbook.Worksheets.Add("Output");

                List<string[]> titles = new List<string[]> { new string[] { "MerchantSKU", "Conteo", "Labelcost", "Returnreason", "OrderAmount" } };

                worksheet.Cell(1, 1).InsertData(titles); //insert titles to one row

                worksheet.Cell(2, 1).InsertData(dt);// inserta Contenido

                pathOutPut1 = pathOutPut1 + @"\ReturnsReportCustomer" + DateTime.Now.ToString("yyyyMMddTHHmmss") + ".xlsx";
                workbook.SaveAs(pathOutPut1);

            }

            ReturnFile.Close();

            string ArchivosSecundarios1 = ConfigurationManager.AppSettings["CarpetaArchivosSecundarios"];
            DirectoryInfo Directorios1 = new DirectoryInfo(ArchivosSecundarios);
            string File1 = "";

            foreach (var Archivos1 in Directorios1.GetFiles())
            {
                string filemaster1 = ".txt";

                if (filemaster1 != "")
                {
                    if (!Archivos1.Name.ToUpper().Contains(filemaster1.ToUpper()))
                        continue;
                }

                // obtiene datos del excel base
                // ----------------------------
                File1 = Archivos1.FullName;

            }

            string emailsTo = ConfigurationManager.AppSettings["EmailsTo1"];
            Email message = new Email();
            message.Send(pathOutPut1, emailsTo);

            // envio de correo
            //----------------
            string emailsTo1 = ConfigurationManager.AppSettings["EmailsTo"];
            Email message1 = new Email();
            message1.Send(File1, emailsTo1);


        }
    }

    // obtiene el valor del registro actual
    // ------------------------------------
    private void CargaReturnsFinanzas(SqlConnection Conexion)
    {

        // abre todos los archivo secundarios para cargarlos en una lista y evaluar cuales se encuentran en los maestros
        // para unificarlos y poder generar un archivo de salida
        // -------------------------------------------------------------------------------------------------------------
        string ArchivosSecundarios = ConfigurationManager.AppSettings["CarpetaArchivosSecundarios"];
        DirectoryInfo Directorios = new DirectoryInfo(ArchivosSecundarios);

        foreach (var Archivos in Directorios.GetFiles())
        {


            // obtiene datos del excel base
            // ----------------------------
            string file = Archivos.FullName;

            string filemaster = ".txt";

            if (filemaster != "")
            {
                if (!Archivos.Name.ToUpper().Contains(filemaster.ToUpper()))
                    continue;
            }


            // Read the file and display it line by line.  
            System.IO.StreamReader ReturnFile = new System.IO.StreamReader(file);
            string[] PalabraReturn = new string[24];
            int contPala = 0;
            string line;

            while ((line = ReturnFile.ReadLine()) != null)
            {
                string[] sa = line.Split('\t');

                if (sa.Length > 24)
                {
                    //cantidad = sa.Length - 42;
                    continue;
                }

                contPala = 0;
                foreach (string s in sa)
                {
                    PalabraReturn[contPala] = s;
                    contPala = contPala + 1;
                }

                if (PalabraReturn[0].Contains("settlement-id"))
                    continue;

                RETURNSFIN clsPedido = new RETURNSFIN();


                clsPedido.settlementid = PalabraReturn[0];
                clsPedido.settlementstartdate = PalabraReturn[1];
                clsPedido.settlementenddate = PalabraReturn[2];
                clsPedido.depositdate = PalabraReturn[3];
                clsPedido.totalamount = PalabraReturn[4];
                clsPedido.currency = PalabraReturn[5];
                clsPedido.transactiontype = PalabraReturn[6];
                clsPedido.orderid = PalabraReturn[7];
                clsPedido.merchantorderid = PalabraReturn[8];
                clsPedido.adjustmentid = PalabraReturn[9];
                clsPedido.shipmentid = PalabraReturn[10];
                clsPedido.marketplacename = PalabraReturn[11];
                clsPedido.amounttype = PalabraReturn[12];
                clsPedido.amountdescription = PalabraReturn[13];
                clsPedido.amount = PalabraReturn[14];
                clsPedido.fulfillmentid = PalabraReturn[15];
                clsPedido.posteddate = PalabraReturn[16];
                clsPedido.posteddatetime = PalabraReturn[17];
                clsPedido.orderitemcode = PalabraReturn[18];
                clsPedido.merchantorderitemid = PalabraReturn[19];
                clsPedido.merchantadjustmentitemid = PalabraReturn[20];
                clsPedido.sku = PalabraReturn[21];
                clsPedido.quantitypurchased = PalabraReturn[22];
                clsPedido.promotionid = PalabraReturn[23];

                string sqlAInsertaRegistroDW = "InsertaRegistroRETURNSFIN";
                SqlCommand cmdReturn = new SqlCommand(sqlAInsertaRegistroDW, Conexion);
                DateTime dte = new DateTime(1000, 1, 1);
                cmdReturn.CommandType = CommandType.StoredProcedure;

                cmdReturn.Parameters.Add("@settlementid", SqlDbType.VarChar).Value = clsPedido.settlementid;
                cmdReturn.Parameters.Add("@settlementstartdate", SqlDbType.VarChar).Value = clsPedido.settlementstartdate;
                cmdReturn.Parameters.Add("@settlementenddate", SqlDbType.VarChar).Value = clsPedido.settlementenddate;
                cmdReturn.Parameters.Add("@depositdate", SqlDbType.VarChar).Value = clsPedido.depositdate;
                cmdReturn.Parameters.Add("@totalamount", SqlDbType.VarChar).Value = clsPedido.totalamount;
                cmdReturn.Parameters.Add("@currency", SqlDbType.VarChar).Value = clsPedido.currency;
                cmdReturn.Parameters.Add("@transactiontype", SqlDbType.VarChar).Value = clsPedido.transactiontype;
                cmdReturn.Parameters.Add("@orderid", SqlDbType.VarChar).Value = clsPedido.orderid;
                cmdReturn.Parameters.Add("@merchantorderid", SqlDbType.VarChar).Value = clsPedido.merchantorderid;
                cmdReturn.Parameters.Add("@adjustmentid", SqlDbType.VarChar).Value = clsPedido.adjustmentid;
                cmdReturn.Parameters.Add("@shipmentid", SqlDbType.VarChar).Value = clsPedido.shipmentid;
                cmdReturn.Parameters.Add("@marketplacename", SqlDbType.VarChar).Value = clsPedido.marketplacename;
                cmdReturn.Parameters.Add("@amounttype", SqlDbType.VarChar).Value = clsPedido.amounttype;
                cmdReturn.Parameters.Add("@amountdescription", SqlDbType.VarChar).Value = clsPedido.amountdescription;
                cmdReturn.Parameters.Add("@amount", SqlDbType.VarChar).Value = clsPedido.amount;
                cmdReturn.Parameters.Add("@fulfillmentid", SqlDbType.VarChar).Value = clsPedido.fulfillmentid;
                cmdReturn.Parameters.Add("@posteddate", SqlDbType.VarChar).Value = clsPedido.posteddate;
                cmdReturn.Parameters.Add("@posteddatetime", SqlDbType.VarChar).Value = clsPedido.posteddatetime;
                cmdReturn.Parameters.Add("@orderitemcode", SqlDbType.VarChar).Value = clsPedido.orderitemcode;
                cmdReturn.Parameters.Add("@merchantorderitemid", SqlDbType.VarChar).Value = clsPedido.merchantorderitemid;
                cmdReturn.Parameters.Add("@merchantadjustmentitemid", SqlDbType.VarChar).Value = clsPedido.merchantadjustmentitemid;
                cmdReturn.Parameters.Add("@sku", SqlDbType.VarChar).Value = clsPedido.sku;
                cmdReturn.Parameters.Add("@quantitypurchased", SqlDbType.VarChar).Value = clsPedido.quantitypurchased;
                cmdReturn.Parameters.Add("@promotionid", SqlDbType.VarChar).Value = clsPedido.promotionid;


                try
                {
                    Conexion.Open();
                    cmdReturn.ExecuteNonQuery();
                    Conexion.Close();
                }
                catch (SystemException e)
                {
                    Console.WriteLine("ERROR");
                    Console.WriteLine(e.Message);
                }
            }
        }
    }


}
